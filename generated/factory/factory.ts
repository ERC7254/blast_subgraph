// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class Create extends ethereum.Event {
  get params(): Create__Params {
    return new Create__Params(this);
  }
}

export class Create__Params {
  _event: Create;

  constructor(event: Create) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get totalSupply(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class factory extends ethereum.SmartContract {
  static bind(address: Address): factory {
    return new factory("factory", address);
  }

  addRevenueSharingTokenLength(): BigInt {
    let result = super.call(
      "addRevenueSharingTokenLength",
      "addRevenueSharingTokenLength():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_addRevenueSharingTokenLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "addRevenueSharingTokenLength",
      "addRevenueSharingTokenLength():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allRevenueSharingTokens(param0: BigInt): Address {
    let result = super.call(
      "allRevenueSharingTokens",
      "allRevenueSharingTokens(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return result[0].toAddress();
  }

  try_allRevenueSharingTokens(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "allRevenueSharingTokens",
      "allRevenueSharingTokens(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class CreateCall extends ethereum.Call {
  get inputs(): CreateCall__Inputs {
    return new CreateCall__Inputs(this);
  }

  get outputs(): CreateCall__Outputs {
    return new CreateCall__Outputs(this);
  }
}

export class CreateCall__Inputs {
  _call: CreateCall;

  constructor(call: CreateCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _symbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _tokenReward(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _totalSupply(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class CreateCall__Outputs {
  _call: CreateCall;

  constructor(call: CreateCall) {
    this._call = call;
  }
}
